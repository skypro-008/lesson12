{
  "environment" : "unittest",
  "summary" : "Skypro. Урок 12. Часть 1\n\nПрактические задания",
  "title" : "Skypro. Lesson 12. Part 1",
  "authors" : [
    "Artur Karapetov"
  ],
  "programming_language" : "Python",
  "language" : "en",
  "course_type" : "PyCharm",
  "items" : [
    {
      "title" : "lesson1",
      "task_list" : [
        {
          "name" : "task1",
          "files" : {
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nimport requests as requests\nfrom task import username, repository_name\n\n\nclass TestCase(unittest.TestCase):\n    def test_requirements_file(self):\n        url = f\"https://github.com/{username}/{repository_name}\"\n        resp = requests.get(url=url)\n        self.assertEqual(resp.status_code, 200, msg=\"Репозиторий не найден\")\n"
            },
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "\"\"\"\n    D переменную username необходимо указать логин от GitHub\n    D переменную repository_name необходимо указать точное имя репозитория\n\n    Взять эти данные можно из URL, например открываем репозиторий в GitHub в браузере\n    и видим в строке браузера следующую ссылку:\n    https://github.com/theartofdevel/notes_system\n    где:\n    username = 'theartofdevel'\n    repository_name = 'notes_system'\n\"\"\"\nusername = ''\nrepository_name = ''\n"
            }
          },
          "description_text" : "requirements.txt\n================\n\nВам необходимо создать публичный репозиторий в GitHub\n\n--- \n**ВАЖНО!**\n\n- Репозиторий должен быть публичным\n- Ветка должна называться `main`\n---\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task2",
          "files" : {
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "\"\"\"\n    D переменную username необходимо указать логин от GitHub\n    D переменную repository_name необходимо указать точное имя репозитория\n\n    Взять эти данные можно из URL, например открываем репозиторий в GitHub в браузере\n    и видим в строке браузера следующую ссылку:\n    https://github.com/theartofdevel/notes_system\n    где:\n    username = 'theartofdevel'\n    repository_name = 'notes_system'\n\"\"\"\nusername = ''\nrepository_name = ''\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nimport requests as requests\nfrom task import username, repository_name\n\n\nclass TestCase(unittest.TestCase):\n    def test_requirements_file(self):\n        url = f\"https://raw.githubusercontent.com/{username}/{repository_name}/main/README.md\"\n        resp = requests.get(url=url)\n        self.assertEqual(resp.status_code, 200, msg=\"Файла README.md нет в репозитории, в ветке main, \"\n                                                    \"либо он находится не в корне проекта\")"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "README.md\n================\n\nСоздать файл `README.md` в корне проекта со следующим содержимом:\n\n**Заголовок 1 уровня**: Cool Flask App\n\n**Текст**: I developed this project because I can handle these:\n**Номерной список**:\n1. Python\n1. Flask\n1. MVC\n1. API\n\nСделать коммит и отправить изменения в публичный удаленный репозиторий\n\n\n--- \n**ВАЖНО!**\n\n- Репозиторий должен быть публичным\n- Ветка должна называться `main`\n---\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task3",
          "files" : {
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "\"\"\"\n    D переменную username необходимо указать логин от GitHub\n    D переменную repository_name необходимо указать точное имя репозитория\n\n    Взять эти данные можно из URL, например открываем репозиторий в GitHub в браузере\n    и видим в строке браузера следующую ссылку:\n    https://github.com/theartofdevel/skypro_test\n    где:\n    username = 'theartofdevel'\n    repository_name = 'skypro_test'\n\"\"\"\nusername = ''\nrepository_name = ''\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nimport requests as requests\nfrom task import username, repository_name\n\n\nclass TestCase(unittest.TestCase):\n    def test_requirements_file(self):\n        url = f\"https://raw.githubusercontent.com/{username}/{repository_name}/main/app.py\"\n        resp = requests.get(url=url)\n        self.assertEqual(resp.status_code, 200, msg=\"Не найден файл app.py в корне проекта указанного репозитория\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "Подключение удаленного репозитория\n================\n\n1. Создать пустой `git` репозиторий локально\n1. Создать _новый, публичный_ репозиторий в `GitHub`\n1. Подключить удаленный репозиторий к локальному\n1. Закоммитить проект на фласку из урока 11 (обязательно должен быть файл `app.py` в корне проекта)\n1. Отправить изменения в публичный удаленный репозиторий\n\n\n\n--- \n**ВАЖНО!**\n\n- Репозиторий должен быть публичным\n- Ветка должна называться `main`\n---\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task4",
          "files" : {
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "\"\"\"\n    D переменную username необходимо указать логин от GitHub\n    D переменную repository_name необходимо указать точное имя репозитория\n\n    Взять эти данные можно из URL, например открываем репозиторий в GitHub в браузере\n    и видим в строке браузера следующую ссылку:\n    https://github.com/theartofdevel/notes_system\n    где:\n    username = 'theartofdevel'\n    repository_name = 'notes_system'\n\"\"\"\nusername = ''\nrepository_name = ''\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nimport requests as requests\nfrom task import username, repository_name\n\n\nclass TestCase(unittest.TestCase):\n    def test_requirements_file(self):\n        url = f\"https://raw.githubusercontent.com/{username}/{repository_name}/main/README.md\"\n        resp = requests.get(url=url)\n        self.assertEqual(resp.status_code, 200, msg=\"Файла README.md нет в репозитории, в ветке main, \"\n                                                    \"либо он находится не в корне проекта\")\n        self.assertTrue(resp.text.startswith('# flask-app'), msg=\"Не верный формат файла README.md, \"\n                                                                 \"либо вы изменили текст или оформление первого заголовка\"\n                                                                 \"README.md должен начинаться с заголовка 1 уровня и текста flask-app\")"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "README.md\n================\n\n1. Используйте репозиторий из прошлого задания\n1. Создать файл README.md\n1. Описать запуск приложения на фласке\n1. Сделать коммит и отправить изменения в публичный удаленный репозиторий на GitHub (в котором лежит проект на фласке из 11 урока)\n\n\nСтруктура README.md\n\n```markdown\n# flask-app\n\nExample app\n\n## Getting started\n\nВесь код расположен в app.py, чтобы запустить проект необходимо создать конфигурацию в PyCharm, \nкоторая будет вызывать `app.py`\n\n## Dependencies\n\nВсе зависимости указаны в файле requirements.txt\n```\n\n--- \n**ВАЖНО!**\n\n- ```# flask-app``` -- не менять текст и формат заголовка в README.md\n- Репозиторий должен быть публичным\n- Ветка должна называться `main`\n---\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task5",
          "files" : {
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "\"\"\"\n    D переменную username необходимо указать логин от GitHub\n    D переменную repository_name необходимо указать точное имя репозитория\n\n    Взять эти данные можно из URL, например открываем репозиторий в GitHub в браузере\n    и видим в строке браузера следующую ссылку:\n    https://github.com/theartofdevel/notes_system\n    где:\n    username = 'theartofdevel'\n    repository_name = 'notes_system'\n\"\"\"\nusername = ''\nrepository_name = ''\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nimport requests as requests\nfrom task import username, repository_name\n\n\nclass TestCase(unittest.TestCase):\n    def test_requirements_file(self):\n        url = f\"https://github.com/{username}/{repository_name}\"\n        resp = requests.get(url=url)\n        # здесь лучше чтобы код не равнялся 200, мало ли GitHub изменят код с 404 на другой\n        self.assertNotEqual(resp.status_code, 200, msg=\"Репозиторий не найден\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "Сделать приватный репозиторий\n================\n\nПубличный удаленный репозиторий с проектом на фласк сделать приватным.\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    }
  ],
  "additional_files" : [
    {
      "name" : "requirements.txt",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "pip~=21.2.4\ncertifi~=2021.5.30\nurllib3~=1.26.6\nidna~=3.2\nsetuptools~=57.4.0\nrequests~=2.26.0"
    }
  ],
  "version" : 11
}