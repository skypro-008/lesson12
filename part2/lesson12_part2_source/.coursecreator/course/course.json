{
  "environment" : "unittest",
  "summary" : "Skypro. Урок 12. Часть 2. \n\nПрактические задания",
  "title" : "Skypro. Lesson 12. Part 2",
  "authors" : [
    "Artur Karapetov"
  ],
  "programming_language" : "Python",
  "language" : "en",
  "course_type" : "PyCharm",
  "items" : [
    {
      "title" : "lesson1",
      "task_list" : [
        {
          "name" : "task1",
          "files" : {
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nimport requests as requests\nfrom task import username, repository_name\n\n\nclass TestCase(unittest.TestCase):\n    def test_requirements_file(self):\n        url = f\"https://raw.githubusercontent.com/{username}/{repository_name}/main/requirements.txt\"\n        resp = requests.get(url=url)\n        self.assertEqual(resp.status_code, 200, msg=\"Файла requirements.txt нет в репозитории, в ветке main, \"\n                                                    \"либо он находится не в корне проекта\")"
            },
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "\"\"\"\n    В переменную username необходимо указать логин от GitHub\n    В переменную repository_name необходимо указать точное имя репозитория\n\n    Взять эти данные можно из URL, например открываем репозиторий в GitHub в браузере\n    и видим в строке браузера следующую ссылку:\n    https://github.com/theartofdevel/notes_system\n    где:\n    username = 'theartofdevel'\n    repository_name = 'notes_system'\n\"\"\"\nusername = ''\nrepository_name = ''\n"
            }
          },
          "description_text" : "requirements.txt\n================\n\nУ вас есть: \n\nПубличный репозиторий с проектом на Фласк из `Урока 12. Часть 1`\n\nНеобходимо: \n\n- Создать файл `requirements.txt` для проекта на Фласке из 11 урока \n- закомитить и запушить этот файл в этот публичный репозиторий (там где уже лежит проект на фласке). \n- перейти на Github и проверить, что все запушилось\n\n\n--- \n**ВАЖНО!**\n\n- Репозиторий должен быть публичным\n- Ветка должна называться `main`\n---",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task4",
          "files" : {
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "\"\"\"\n    В переменную username необходимо указать логин от GitHub\n    В переменную repository_name необходимо указать точное имя репозитория\n\n    Взять эти данные можно из URL, например открываем репозиторий в GitHub в браузере\n    и видим в строке браузера следующую ссылку:\n    https://github.com/theartofdevel/notes_system\n    где:\n    username = 'theartofdevel'\n    repository_name = 'notes_system'\n\"\"\"\nusername = ''\nrepository_name = ''\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nimport requests as requests\nfrom task import heroku_app_url\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertNotEqual(heroku_app_url, '', msg=\"Адрес не указан!\")\n        try:\n            heroku_app_url.index('herokuapp.com')\n        except ValueError:\n            self.assertEqual(True, False, msg=\"Невалидный адрес Heroku приложения!\")\n        resp = requests.get(url=heroku_app_url)\n        self.assertEqual(resp.status_code, 200, msg=\"Ваше приложение не доступно по указанному URL!\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "Deploy Flask Project\n================\n\nУ вас есть: \n\nПубличный репозиторий с проектом на Фласк из `Урока 12. Часть 1`\n\nНеобходимо: \n\n- Задеплоить проект на фласке из этого репозитория на `Heroku`\n- Убедиться, что приложение работает\n- Скопировать ссылку в значение переменой `heroku_app_url`\n\n--- \n**ВАЖНО!**\n\nНеобходимо указать URL до вашего приложения в Heroku, который можно открыть в браузере и что-то увидеть\n\n---",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task2",
          "files" : {
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "\"\"\"\n    В переменную username необходимо указать логин от GitHub\n    В переменную repository_name необходимо указать точное имя репозитория\n\n    Взять эти данные можно из URL, например открываем репозиторий в GitHub в браузере\n    и видим в строке браузера следующую ссылку:\n    https://github.com/theartofdevel/notes_system\n    где:\n    username = 'theartofdevel'\n    repository_name = 'notes_system'\n\"\"\"\nusername = ''\nrepository_name = ''\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nimport requests as requests\nfrom task import username, repository_name\n\n\nclass TestCase(unittest.TestCase):\n    def test_requirements_file(self):\n        url = f\"https://github.com/{username}/{repository_name}/tree/main/venv\"\n        resp = requests.get(url=url)\n        self.assertEqual(resp.status_code, 200, msg=\"Директория venv не найдена\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "venv\n================\n\nУ вас есть: \nПубличный репозиторий с проектом на Фласк из Урока 12. Часть 1.\n\nНеобходимо:\n- создать виртуальное окружение (venv) в директорию `venv`\n- закомитить и запушить эту директорию в этот публичный репозиторий (там где уже лежит проект на фласке).\n- перейти на Github и проверить, что все запушилось\n\n\n--- \n**ВАЖНО!**\n\n- если venv уже существует создавать его повторно не надо\n- репозиторий должен быть публичным\n- ветка должна называться `main`\n---",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    }
  ],
  "additional_files" : [
    {
      "name" : "requirements.txt",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "pip~=21.2.4\ncertifi~=2021.5.30\nurllib3~=1.26.6\nidna~=3.2\nsetuptools~=57.4.0\nrequests~=2.26.0"
    }
  ],
  "version" : 11
}